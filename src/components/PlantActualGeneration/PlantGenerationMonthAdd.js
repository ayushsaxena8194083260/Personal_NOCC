import React, { Component } from 'react';
import { Modal, Button, Row, Col, Form, } from 'react-bootstrap';
import { withRouter } from 'react-router-dom';
import { connect } from 'react-redux';
import '../../App.scss'
import DropDown from "../Common/DropDown";
import { getPlantByType } from "../../actions/moduleCleaningAnalysisActions";
import { createOrUpdatePlantGen } from "../../actions/plantGenerationActions";

class PlantGenerationAddMonth extends Component {

  constructor(props) {
    super(props);
    this.state = {
      plantTypes: this.props.plantTypes,
      selectedPlantType: this.props.selectedPlantType,
      plants: [],
      selectedPlanType: '',
      selectedPlant: "",
      value: null,
      postData: this.props.postData,
      // postData:{

      //   actualGeneration: "0",
      //   autoGenerated: 0,
      //   bitFlag:0,
      //   connectedCapacity:null,
      //   dataFlag:1,
      //   date:null,
      //   gridOutage:"Nil",
      //   import_data:null,
      //   jmrDate:null,
      //   jmrStart:null,
      //   ndays:0,
      //   plantDowntime:"0",
      //   plantGenerationId:0,
      //   plantId:0,
      //   pyranometerTilt:null,
      //   remark:null,
      //   soilingRatio:"Nil",
      //   tilt:null,
      //   unitBilledLastMonth:"Nil",
      // },
      isSubmitted: false,
      selectedPlantOptions: this.props.data.plantName//this.props.selectedProjectTypes
    }
    this.invokeActualGeneration = this.invokeActualGeneration.bind(this);
  }

  componentDidMount() {
    // document.title = 'Plant Fault Data';
  }
  invokeActualGeneration() {
    this.fieldValid();
    this.onSubmit();
  }
  componentWillReceiveProps(nextProps) {
    if (nextProps !== null) {
      this.setState({
        plantTypes: nextProps.plantTypes,
      })
    }
  }

  handleChangePlantType(event) {
    const selectedValue = event.target.value;
    if (selectedValue !== this.state.selectedPlantType) {
      this.props.getPlantByType(selectedValue);
      this.setState({ selectedPlantType: selectedValue, selectedPlantOptions: null });
    }
  }
  getDropDownPlants() {
    let plants = [];
    plants.push({ displayText: "Select Plant", value: "0" })
    this.state.plantTypes && this.state.plantTypes.map((item) => {
      plants.push({ displayText: item.plantName, value: item.plantId })
    });
    return plants;

  }

  handleChangePlants(event) {
    const _data = this.state.postData;
    const selectedValue = event.target.value;
    if (selectedValue) {
      _data[event.target.name] = selectedValue;
      this.setState({ selectedPlantOptions: selectedValue, postData: _data });

    }
  }

  renderErrortext(fieldID, msg) {
    return (
      this.state.isSubmitted === true && !this.state.postData[fieldID] && <p className="errorText" style={{ color: "#CC0000", display: "block", fontSize: "11px", marginTopop: "0.5em" }}>{msg}</p>
    )
  }

  handleChange(event) {
    let _data = this.state.postData;
    _data[event.target.name] = event.target.value;
    this.setState({ postData: _data });
  }

  fieldValid() {
    let inValid = true;

    this.props.submitedFields.map((item) => {
      if (!this.state.postData[item]) {
        inValid = false;
      }
    })
    return inValid;
  }

  onSubmit = () => {
    const date = this.state.postData["date"];
    const modal = {
      "actualGeneration": "",
      "autoGenerated": 0,
      "bitFlag": 0,
      "connectedCapacity": "",
      "dataFlag": 1,
      "date": date,
      "gridOutage": "",
      "import_data": this.props.postData.importData,
      "jmrDate": date,
      "jmrStart": date,
      "ndays": 0,
      "export": 0,
      "plantDowntime": date,
      "plantGenerationId": 0,
      "plantId": "",
      "pyranometerTilt": "",
      "remark": "",
      "soilingRatio": "",
      "tilt": "",
      "unitBilledLastMonth": ""
    }
    this.props.createOrUpdatePlantGen({ plantGeneration: { ...modal, ...this.state.postData }, type: this.props.pageName });
    this.props.onHide();
  }

  render() {
    return (
      <div className="modal-main">
        <Modal {...this.props} size="lg" aria-labelledby="contained-modal-title-vcenter" centered>
          <Modal.Title>{this.props.pageName}</Modal.Title>
          <Modal.Body>
            <Row>
              <Col lg={2} md={2} sm={6}>
                <Form.Label>Plant Type:</Form.Label>
              </Col>
              <Col lg={3} md={3} sm={6} className="xinput_group full__width">
                <DropDown
                  className="top-search-input form-control"
                  Name="plantType"
                  itemSource={this.props.plantType}
                  value={this.state.selectedPlantType}
                  handleChange={(item) => this.handleChangePlantType(item)}
                />
                {this.renderErrortext("plantType", "The Plant Type is Required.")}
              </Col>
              <Col lg={2} md={2} sm={6}>
                <Form.Label>Plant:</Form.Label>
              </Col>
              <Col lg={3} md={3} sm={6} className="xinput_group full__width">
                <DropDown
                  className="top-search-input form-control"
                  Name="plantId"
                  itemSource={this.getDropDownPlants()}
                  value={this.state.selectedPlantOptions}
                  handleChange={(item) => this.handleChangePlants(item)}
                />
                {this.renderErrortext("plantId", "The Plant Name is Required.")}
              </Col>


            </Row>
            <Row>
              <Col lg={2} md={2} sm={6}>
                <Form.Label>Data Type:</Form.Label>
              </Col>
              <Col lg={3} md={3} sm={6} className="xinput_group full__width">
                <select required className="top-search-input" class="form-control" name="dataFlag" type="dropdown" onChange={(item) => this.handleChange(item)} value={this.state.postData && this.state.postData.dataFlag}>
                  <option value="1">Daily</option>
                  <option value="2">Monthly</option>
                </select>
              </Col>
              <Col lg={2} md={2} sm={6}>
              <Form.Label>Date:</Form.Label>

            </Col>
            <Col lg={3} md={3} sm={6} className="xinput_group full__width">
              <Form.Control className="top-search-input" name="date" type="date" onChange={(item) => this.handleChange(item)} value={this.state.postData && this.state.postData.date} />
              {this.renderErrortext("date", "The date is Required.")}
            </Col>
        </Row>
<Row>
<Col lg={2} md={2} sm={6}>
                <Form.Label>Export (kWh):</Form.Label>

              </Col>
              <Col lg={3} md={3} sm={6} className="xinput_group full__width">
                <Form.Control className="top-search-input" name="export" type="text" onChange={(item) => this.handleChange(item)} value={this.state.postData && this.state.postData.export} />
                {this.renderErrortext("export", "The Export (KWH) is Required.")}
              </Col>
              <Col lg={2} md={2} sm={6}>
                <Form.Label>Plant Tilt:</Form.Label>
              </Col>
              <Col lg={3} md={3} sm={6} className="xinput_group full__width">

                <Form.Control className="top-search-input" name="tilt" type="text" onChange={(item) => this.handleChange(item)} value={this.state.postData && this.state.postData.tilt} />
                {this.renderErrortext("tilt", "The Plant Tilt is Required.")}
              </Col>
            
</Row>
          
            <Row>
              <Col lg={2} md={2} sm={6}>
                <Form.Label>Connected Capacity (kWh):</Form.Label>
              </Col>
              <Col lg={3} md={3} sm={6} className="xinput_group full__width">

                <Form.Control className="top-search-input" name="connectedCapacity" type="text" onChange={(item) => this.handleChange(item)} value={this.state.postData && this.state.postData.connectedCapacity} />
                {this.renderErrortext("connectedCapacity", "The Connected Capacity (KWH) is Required.")}
              </Col>
              <Col lg={2} md={2} sm={6}>
                <Form.Label>Import (kWh):</Form.Label>
              </Col>
              <Col lg={3} md={3} sm={6} className="xinput_group full__width">

                <Form.Control className="top-search-input" name="import_data" type="text" onChange={(item) => this.handleChange(item)} value={this.state.postData && this.state.postData.import_data} />
                {this.renderErrortext("import_data", "The Import (KWH) is Required.")}
              </Col>
            </Row>
            <Row>
              <Col lg={2} md={2} sm={6}>
                <Form.Label>Pyranometer Tilt:</Form.Label>
              </Col>
              <Col lg={3} md={3} sm={6} className="xinput_group full__width">


                <Form.Control className="top-search-input" name="pyranometerTilt" type="text" onChange={(item) => this.handleChange(item)} value={this.state.postData && this.state.postData.pyranometerTilt} />
                {this.renderErrortext("pyranometerTilt", "The Pyranometer Tilt is Required.")}
              </Col>
              <Col lg={2} md={2} sm={6}>
                <Form.Label>JMR Date:</Form.Label>
              </Col>
              <Col lg={3} md={3} sm={6} className="xinput_group full__width">
                <Form.Control className="top-search-input" name="jmrDate" type="date" onChange={(item) => this.handleChange(item)} value={this.state.postData && this.state.postData.jmrDate} />
                {this.renderErrortext("jmrDate", "The JMR Date is Required.")}
              </Col>

            </Row>
            <Row>


            </Row>
          </Modal.Body>
          <Modal.Footer>
            <Button variant="danger" onClick={this.props.onHide}>
              Close
          </Button>
            <Button variant="primary" onClick={this.invokeActualGeneration}>
              Save Changes
          </Button>
          </Modal.Footer>
        </Modal>
      </div>
    )
  }
}

const mapStateToProps = (state, props) => {
  const plantDailyGen = props.location && props.location.plantDailyGen ? props.location.plantDailyGen : {};
  return {
    pageName: state.plantDailyGenerationReducer.plantDailyGen.length > 0 ? "Edit Plant Generation" : "Add Plant Generation",
    plantsByType: state.plants.plantsByType,
    plantType: [{ displayText: "Select Plant Type", value: "-1" }, { displayText: "GROUNDMOUNT", value: "GROUNDMOUNT" }, { displayText: "ROOFTOP", value: "ROOFTOP" }],
    plantTypes: state.projectTypes.plantTypes,
    displayMessage: state.plantDailyGenerationReducer.displayMessage,
    postData: props.data ? props.data : {},
    submitedFields: ["pyranometerTilt", "import_data", "plantId", "dataFlag", "export", "date", "tilt", "connectedCapacity"]

  }
}

const mapDispatchToProps = (dispatch) => {
  return {
    getPlantByType: (plantsByType) => dispatch(getPlantByType(plantsByType)),
    createOrUpdatePlantGen: (plantGeneration) => dispatch(createOrUpdatePlantGen(plantGeneration))
  }
}

export default withRouter(connect(mapStateToProps, mapDispatchToProps)(PlantGenerationAddMonth));